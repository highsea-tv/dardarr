import chokidar from 'chokidar'
import { glob } from 'glob'
import { compileFromFile } from 'json-schema-to-typescript'
import { readFile, writeFile } from 'node:fs/promises'
import { basename, resolve } from 'node:path'
import prettier from 'prettier'

( async () => {

    const dtsOutputDir = resolve(process.cwd(), './packages/types/schema')
    const JSONSchemaDir = resolve(process.cwd(), './packages/schema/json')
    const jsonFiles = await glob(resolve(JSONSchemaDir, './**/*.json'))

    chokidar.watch(jsonFiles).on('all', async (event, path) => {
        if (['add', 'change'].includes(event)) {

            try {

                const rawFileContents = await readFile(path, 'utf-8')
                if (rawFileContents && rawFileContents !== '') {

                    console.log(`⏳ Generating types for ${basename(path)}...`)

                    const outputFileName = basename(path).replace('.json', '.d.ts')
                    const outputFilePath = resolve(dtsOutputDir, outputFileName)

                    const generatedTypes = await compileFromFile(path, {
                        bannerComment: '',
                        additionalProperties: false,
                        strictIndexSignatures: true
                    })

                    const output = `
                    /**
                     * This file was automatically generated by the script \`scripts/generate-json-schema-types.js\`
                     * Do not edit this file manually. Any manual changes will be overwritten.
                     */

                    export {}

                    declare global {

                        namespace Schema {

                            ${generatedTypes}
                            
                        }

                    }`

                    const formattedOutput = await prettier.format(output, { parser: 'typescript' })
                    await writeFile(outputFilePath, formattedOutput, 'utf-8')

                    console.log(`✅ Generated types for ${basename(path)}`)

                } else {

                    console.warn(`⚠️ ${basename(path)} is empty, skipping`)

                }

            } catch(err) {

                console.error(`❌ Unable to generate types for ${basename(path)}`, err)

            }

        }
    })

})()
